<!--
    The MIT License
    Copyright (c) 2016 Nick Guletskii
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:
    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.
-->
<Window x:Class="SchoolCommanderWPF.GUI.SendFilesWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:SchoolCommanderWPF"
        xmlns:fa="http://schemas.fontawesome.io/icons/"
        xmlns:gui="clr-namespace:SchoolCommanderWPF.GUI"
        xmlns:converters="clr-namespace:SchoolCommanderWPF.Converters"
        mc:Ignorable="d"
        Title="SchoolCommander - Send Files" Height="389" Width="672"
        DataContext="{Binding Mode=OneWay, RelativeSource={RelativeSource Self}}"
        TextOptions.TextFormattingMode="Display" Closing="Window_Closing" Icon="/SchoolCommander;component/SchoolCommander.ico" Closed="Window_Closed">
    <Window.Resources>
        <converters:FileSizeConverter x:Key="FileSizeConverter" />
        <converters:BooleanToVisibilityConverter x:Key="VisibilityBooleanConverter" />
        <converters:InverseBooleanConverter x:Key="InverseBooleanConverter" />
        <Style x:Key="ProgressCellStyle" TargetType="{x:Type DataGridCell}">
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGridCell}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                    <Setter Property="Foreground"
                            Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                </Trigger>
                <Trigger Property="IsKeyboardFocusWithin" Value="True">
                    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static DataGrid.FocusBorderBrushKey}}" />
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsSelected" Value="true" />
                        <Condition Property="Selector.IsSelectionActive" Value="false" />
                    </MultiTrigger.Conditions>
                    <Setter Property="Background"
                            Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
                    <Setter Property="BorderBrush"
                            Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
                    <Setter Property="Foreground"
                            Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}" />
                </MultiTrigger>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" SnapsToDevicePixels="true"
                                   Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                   StrokeThickness="1" StrokeDashArray="1 2" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD" />
        <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070" />
        <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD" />
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1" />
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6" />
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B" />
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4" />
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5" />
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383" />

    </Window.Resources>

    <Grid Name="MainGrid">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="2*" />
            <ColumnDefinition Width="5" />
            <ColumnDefinition Width="3*" />
        </Grid.ColumnDefinitions>
        <GridSplitter Grid.Column="1" x:Name="gridSplitter" HorizontalAlignment="Stretch" />
        <Grid Grid.Column="0"
              IsEnabled="{Binding IsRunning, Converter={StaticResource InverseBooleanConverter}, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type gui:SendFilesWindow}}}">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Label Grid.Row="0" Grid.Column="0" Content="Destination:" />
                <TextBox Grid.Row="0" Grid.Column="1" MaxLines="1"
                          Text="{Binding  Source={StaticResource Settings}, Path=Default.SendDestinationPath, Mode=TwoWay}"
                          />
            </Grid>
            <ToolBar Grid.Row="1" x:Name="toolBar">
                <Button x:Name="AddButton" Click="AddButton_Click" Padding="10,3">
                    <Button.Content>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <fa:FontAwesome Icon="Plus" Grid.Column="0" VerticalAlignment="Center" />
                            <TextBlock Grid.Column="1" VerticalAlignment="Center" Margin="5,0,0,0">Add</TextBlock>
                        </Grid>
                    </Button.Content>
                </Button>
                <Button x:Name="RemoveButton" Click="RemoveButton_Click" Padding="10,3">
                    <Button.Content>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <fa:FontAwesome Icon="Minus" Grid.Column="0" VerticalAlignment="Center" />
                            <TextBlock Grid.Column="1" VerticalAlignment="Center" Margin="5,0,0,0">Remove</TextBlock>
                        </Grid>
                    </Button.Content>
                </Button>
            </ToolBar>

            <ListBox x:Name="FileNamesList" Grid.Row="2" SelectionMode="Multiple" />

            <Button x:Name="SendButton" Grid.Row="3" Content="Send" Margin="10" HorizontalAlignment="Right"
                    Padding="10,3" Click="SendButton_Click" />
        </Grid>
        <Grid Grid.Column="2" Grid.Row="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <DataGrid Grid.Row="0" Grid.ColumnSpan="2" Name="ProgressTable" AutoGenerateColumns="False"
                      ItemsSource="{Binding Mode=OneWay}" IsReadOnly="True"
                      CellStyle="{DynamicResource ProgressCellStyle}" RowDetailsVisibilityMode="Collapsed">
                <DataGrid.Columns>
                    <DataGridTemplateColumn Header="" CellTemplate="{StaticResource ExpandDetails}" Width="30" />
                    <DataGridTextColumn Binding="{Binding Name}" ClipboardContentBinding="{x:Null}"
                                        Header="Computer" />
                    <DataGridTextColumn
                        Binding="{Binding BytesCopied, Converter={StaticResource FileSizeConverter}, Mode=OneWay}"
                        ClipboardContentBinding="{x:Null}"
                        Header="Copied" />
                    <DataGridTextColumn
                        Binding="{Binding TotalSize, Converter={StaticResource FileSizeConverter}, Mode=OneWay}"
                        ClipboardContentBinding="{x:Null}"
                        Header="Total size" />
                    <DataGridTextColumn Binding="{Binding JobStatus, Mode=OneWay}" ClipboardContentBinding="{x:Null}"
                                        Header="Status" />
                    <DataGridTemplateColumn ClipboardContentBinding="{x:Null}" Header="Progress" Width="*">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <Grid
                                    Visibility="{Binding IsRunning, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type gui:SendFilesWindow}}, Converter={StaticResource VisibilityBooleanConverter}}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="*" />
                                    </Grid.ColumnDefinitions>
                                    <Label Grid.Column="0" Content="{Binding Progress, Mode=OneWay}"
                                           ContentStringFormat="0%" Width="40" />
                                    <ProgressBar Grid.Column="1" Value="{Binding Progress, Mode=OneWay}" Maximum="1" />
                                </Grid>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                </DataGrid.Columns>

                <DataGrid.RowDetailsTemplate>
                    <DataTemplate>
                        <TextBlock Margin="10">

                            <TextBlock.Style>
                                <Style TargetType="{x:Type TextBlock}">
                                    <Setter Property="Text" Value="{Binding Exception}" />
                                    <Style.Triggers>
                                        <DataTrigger
                                            Binding="{Binding Exception, Converter={StaticResource IsNullConverter}}"
                                            Value="True">
                                            <Setter Property="Text" Value="No exceptions." />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                    </DataTemplate>
                </DataGrid.RowDetailsTemplate>
            </DataGrid>
            <ProgressBar Grid.Row="1" Grid.Column="0" Margin="10,10,0,10"
                         Visibility="{Binding IsRunning, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type gui:SendFilesWindow}}, Converter={StaticResource VisibilityBooleanConverter}}"
                         Maximum="1" />
            <Button x:Name="CancelButton" Grid.Row="1" Grid.Column="1" Margin="10"
                    HorizontalAlignment="Right" Padding="10,3" Click="CancelButton_Click"
                    VerticalAlignment="Center">
                <Button.Style>
                    <Style TargetType="{x:Type Button}">
                        <Setter Property="Content">
                            <Setter.Value>
                                <TextBlock>Cancel</TextBlock>
                            </Setter.Value>
                        </Setter>
                        <Setter Property="IsEnabled" Value="False" />
                        <Setter Property="Foreground" Value="DimGray" />
                        <Style.Triggers>
                            <DataTrigger
                                Binding="{Binding IsCancelling, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type gui:SendFilesWindow}}}"
                                Value="True">
                                <Setter Property="Content">
                                    <Setter.Value>
                                        <TextBlock>Cancelling...</TextBlock>
                                    </Setter.Value>
                                </Setter>
                            </DataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsRunning}" Value="True" />
                                    <Condition Binding="{Binding IsCancelling}" Value="False" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="IsEnabled" Value="True" />
                                <Setter Property="Foreground" Value="Black" />
                            </MultiDataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>

            </Button>
        </Grid>

    </Grid>
</Window>