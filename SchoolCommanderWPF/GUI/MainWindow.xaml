<!--
    The MIT License
    Copyright (c) 2016 Nick Guletskii
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:
    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.
-->
<Window x:Class="SchoolCommanderWPF.GUI.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:SchoolCommanderWPF"
        xmlns:fa="http://schemas.fontawesome.io/icons/"
        xmlns:converters="clr-namespace:SchoolCommanderWPF.Converters"
        xmlns:repository="clr-namespace:SchoolCommanderWPF.Repository"
        mc:Ignorable="d"
        Title="SchoolCommander" Height="416" Width="574"
        DataContext="{Binding Mode=OneWay, RelativeSource={RelativeSource Self}}"
        TextOptions.TextFormattingMode="Display" Closing="Window_Closing" Icon="/SchoolCommander;component/SchoolCommander.ico" >
    <Window.Resources>
        <converters:IsNullConverter x:Key="IsNullConverter"/>
        <converters:InverseBooleanConverter x:Key="InverseBooleanConverter" />


        <Style x:Key="ComputerGridStyle" TargetType="{x:Type DataGridCell}">
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGridCell}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                    <Setter Property="Foreground"
                            Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                </Trigger>
                <Trigger Property="IsKeyboardFocusWithin" Value="True">
                    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static DataGrid.FocusBorderBrushKey}}" />
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsSelected" Value="true" />
                        <Condition Property="Selector.IsSelectionActive" Value="false" />
                    </MultiTrigger.Conditions>
                    <Setter Property="Background"
                            Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
                    <Setter Property="BorderBrush"
                            Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
                    <Setter Property="Foreground"
                            Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}" />
                </MultiTrigger>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" SnapsToDevicePixels="true"
                                   Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                   StrokeThickness="1" StrokeDashArray="1 2" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD" />
        <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070" />
        <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD" />
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1" />
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6" />
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B" />
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4" />
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5" />
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383" />
        <Style x:Key="InetControlButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}" />
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}" />
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Padding" Value="10, 3" />
            <Setter Property="Margin" Value="0, 3" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border"
                                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border"
                                        Value="{StaticResource Button.MouseOver.Background}" />
                                <Setter Property="BorderBrush" TargetName="border"
                                        Value="{StaticResource Button.MouseOver.Border}" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border"
                                        Value="{StaticResource Button.Pressed.Background}" />
                                <Setter Property="BorderBrush" TargetName="border"
                                        Value="{StaticResource Button.Pressed.Border}" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border"
                                        Value="{StaticResource Button.Disabled.Background}" />
                                <Setter Property="BorderBrush" TargetName="border"
                                        Value="{StaticResource Button.Disabled.Border}" />
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter"
                                        Value="{StaticResource Button.Disabled.Foreground}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="2*" />
            <RowDefinition Height="5" />
            <RowDefinition Height="1*" />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition Width="5" />
            <ColumnDefinition Width="3*" />
        </Grid.ColumnDefinitions>
        <ListBox x:Name="ActionsList" Grid.Row="0" Grid.RowSpan="4">

            <ListBox.ItemContainerStyle>
                <Style TargetType="{x:Type ListBoxItem}">
                    <EventSetter Event="PreviewMouseLeftButtonDown" Handler="ActionItem_Clicked" />
                </Style>
            </ListBox.ItemContainerStyle>
            <ListBox.ItemTemplate>
                <DataTemplate >
                    <TextBlock Text="{Binding Name}"></TextBlock>
                    </DataTemplate>
            </ListBox.ItemTemplate>
        </ListBox>

        <GridSplitter Grid.Row="0" Grid.Column="1" Grid.RowSpan="4" HorizontalAlignment="Stretch" />

        <DataGrid x:Name="ComputersTable" Grid.RowSpan="1"
                  d:DataContext="{d:DesignInstance {x:Type repository:ComputerManager}}" ItemsSource="{Binding Mode=OneWay}"
                  AutoGenerateColumns="False" Grid.Row="1" Grid.Column="2" RowHeight="30"
                  CellStyle="{DynamicResource ComputerGridStyle}" CanUserAddRows="False" CanUserDeleteRows="False"
                  RowDetailsVisibilityMode="Collapsed">
            <DataGrid.Columns>
                <DataGridTemplateColumn Header="" CellTemplate="{StaticResource ExpandDetails}" Width="30" />
                <DataGridTemplateColumn Header="Inet controls">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <StackPanel Orientation="Horizontal"
                                        IsEnabled="{Binding InternetConnectionStatus.ChangingInternetStatus, Converter={StaticResource InverseBooleanConverter}}">
                                <Button Content="Off" Style="{DynamicResource InetControlButtonStyle}"
                                        Name="InetOffButton" Click="InetOffButton_OnClick" />
                                <Button Content="On" Style="{DynamicResource InetControlButtonStyle}"
                                        Name="InetOnButton" Click="InetOnButton_OnClick" />
                            </StackPanel>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Header="Effective">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <fa:FontAwesome
                                FontSize="20"
                                VerticalAlignment="Center">
                                <fa:FontAwesome.Style>
                                    <Style TargetType="{x:Type fa:FontAwesome}">
                                        <Setter Property="Icon" Value="QuestionCircle" />
                                        <Setter Property="Foreground" Value="Black" />
                                        <Style.Triggers>
                                            <DataTrigger
                                                Binding="{Binding InternetConnectionStatus.EffectiveAccessLevel}"
                                                Value="Allowed">
                                                <Setter Property="Icon" Value="Chain" />
                                            </DataTrigger>
                                            <DataTrigger
                                                Binding="{Binding InternetConnectionStatus.EffectiveAccessLevel}"
                                                Value="Forbidden">
                                                <Setter Property="Icon" Value="ChainBroken" />
                                            </DataTrigger>
                                            <DataTrigger
                                                Binding="{Binding InternetConnectionStatus.EffectiveAccessLevelCheckException, Converter={StaticResource IsNullConverter}}"
                                                Value="False">
                                                <Setter Property="Foreground" Value="Red" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </fa:FontAwesome.Style>
                                <fa:FontAwesome.ToolTip>
                                    <StackPanel>
                                        <TextBlock
                                            Text="{Binding InternetConnectionStatus.EffectiveAccessLevelDetails}"
                                            TextWrapping="Wrap"
                                            TextAlignment="Left"
                                            HorizontalAlignment="Stretch" />
                                    </StackPanel>
                                </fa:FontAwesome.ToolTip>
                            </fa:FontAwesome>

                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTextColumn Binding="{Binding Name}" ClipboardContentBinding="{x:Null}" Header="Computer name"
                                    IsReadOnly="True" />
                <DataGridTemplateColumn Header="Status" IsReadOnly="True">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding Status.Summary, Mode=OneWay}" ToolTip="{Binding Status.Text}" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
            <DataGrid.RowDetailsTemplate>
                <DataTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="1*" />
                            <ColumnDefinition Width="1*" />
                            <ColumnDefinition Width="1*" />
                        </Grid.ColumnDefinitions>
                        <ScrollViewer Grid.Column="0" Width="600" Height="300" HorizontalScrollBarVisibility="Visible"
                                      VerticalScrollBarVisibility="Visible">
                            <TextBlock Text="{Binding InternetConnectionStatus.AccessLevelSynchronizationException}" />
                        </ScrollViewer>
                        <ScrollViewer Grid.Column="1" Width="600" Height="300" HorizontalScrollBarVisibility="Visible"
                                      VerticalScrollBarVisibility="Visible">
                            <TextBlock Text="{Binding InternetConnectionStatus.EffectiveAccessLevelCheckException}" />
                        </ScrollViewer>
                        <ScrollViewer Grid.Column="2" Width="600" Height="300" HorizontalScrollBarVisibility="Visible"
                                      VerticalScrollBarVisibility="Visible">
                            <TextBlock Text="{Binding Status.DataUpdateException}" />
                        </ScrollViewer>
                    </Grid>
                </DataTemplate>
            </DataGrid.RowDetailsTemplate>
        </DataGrid>
        <GridSplitter Grid.Row="2" Grid.Column="2" Grid.ColumnSpan="1" HorizontalAlignment="Stretch" />
        <ListView x:Name="LogView" Grid.Column="2" Grid.Row="3" />
        <ToolBar x:Name="toolBar" Grid.Column="2">

            <Button x:Name="Send" Click="Send_Click" Padding="10,3">
                <Button.Content>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <fa:FontAwesome Icon="Upload" Grid.Column="0" VerticalAlignment="Center" FontSize="16" />
                        <TextBlock Grid.Column="1" VerticalAlignment="Center" Margin="5,0,0,0">Send</TextBlock>
                    </Grid>
                </Button.Content>
            </Button>
            <Button x:Name="Collect" Click="Collect_Click" Padding="10,3">
                <Button.Content>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <fa:FontAwesome Icon="Download" Grid.Column="0" VerticalAlignment="Center" FontSize="16" />
                        <TextBlock Grid.Column="1" VerticalAlignment="Center" Margin="5,0,0,0">Collect</TextBlock>
                    </Grid>
                </Button.Content>
            </Button>
            <Button x:Name="Run" Click="Run_Click" Padding="10,3">
                <Button.Content>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <fa:FontAwesome Icon="Terminal" Grid.Column="0" VerticalAlignment="Center" FontSize="16" />
                        <TextBlock Grid.Column="1" VerticalAlignment="Center" Margin="5,0,0,0">Run PowerShell</TextBlock>
                    </Grid>
                </Button.Content>
            </Button>
            <Button x:Name="RefreshButton" Click="Refresh_Click" Padding="10,3">
                <Button.Content>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <fa:FontAwesome Icon="Refresh" Grid.Column="0" VerticalAlignment="Center" FontSize="16" />
                        <TextBlock Grid.Column="1" VerticalAlignment="Center" Margin="5,0,0,0">Refresh</TextBlock>
                    </Grid>
                </Button.Content>
            </Button>
            <Button x:Name="AddComputer" Click="AddComputer_Click" Padding="10,3">
                <Button.Content>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <fa:FontAwesome Icon="Plus" Grid.Column="0" VerticalAlignment="Center" FontSize="16" />
                        <TextBlock Grid.Column="1" VerticalAlignment="Center" Margin="5,0,0,0">Add Computer</TextBlock>
                    </Grid>
                </Button.Content>
            </Button>
            <Button x:Name="RemoveComputers" Click="RemoveComputers_Click" Padding="10,3">
                <Button.Content>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <fa:FontAwesome Icon="Minus" Grid.Column="0" VerticalAlignment="Center" FontSize="16" />
                        <TextBlock Grid.Column="1" VerticalAlignment="Center" Margin="5,0,0,0">Remove Computer</TextBlock>
                    </Grid>
                </Button.Content>
            </Button>
            <Button x:Name="SaveComputers" Click="SaveComputers_Click" Padding="10,3">
                <Button.Content>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <fa:FontAwesome Icon="Save" Grid.Column="0" VerticalAlignment="Center" FontSize="16" />
                        <TextBlock Grid.Column="1" VerticalAlignment="Center" Margin="5,0,0,0">Save Computers</TextBlock>
                    </Grid>
                </Button.Content>
            </Button>
            <Button x:Name="SettingsButton" Click="Settings_Click" Padding="10,3">
                <Button.Content>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <fa:FontAwesome Icon="Cog" Grid.Column="0" VerticalAlignment="Center" FontSize="16" />
                        <TextBlock Grid.Column="1" VerticalAlignment="Center" Margin="5,0,0,0">Settings</TextBlock>
                    </Grid>
                </Button.Content>
            </Button>
        </ToolBar>
    </Grid>
</Window>